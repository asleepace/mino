{
    "Component Template": {
      "prefix": "component",
      "body": [
        "@template {",
        "  <div class=\"${1:component-name}\">",
        "    ${2:<!-- Component content -->}",
        "  </div>",
        "}",
        "@end",
        "",
        "@style {",
        "  .${1:component-name} {",
        "    ${3:/* Component styles */}",
        "  }",
        "}",
        "@end",
        "",
        "@prop ${4:propName} = ${5:\"defaultValue\"}",
        "",
        "@onMounted {",
        "  ${6:// Component initialization}",
        "}",
        "@end"
      ],
      "description": "Create a basic Mino component structure"
    },
    "Property": {
      "prefix": "prop",
      "body": [
        "@prop ${1:(${2:modifiers})} ${3:propName} = ${4:defaultValue}"
      ],
      "description": "Create a component property"
    },
    "Reactive Property": {
      "prefix": "rprop",
      "body": [
        "@prop (reactive) ${1:propName} = ${2:defaultValue}"
      ],
      "description": "Create a reactive component property"
    },
    "Computed Property": {
      "prefix": "cprop",
      "body": [
        "@prop (computed) ${1:propName} = () => ${2:expression}"
      ],
      "description": "Create a computed property"
    },
    "Method": {
      "prefix": "method",
      "body": [
        "@method ${1:(${2:modifiers})} ${3:methodName}(${4:parameters}) {",
        "  ${5:// Method implementation}",
        "}",
        "@end"
      ],
      "description": "Create a component method"
    },
    "Event Handler": {
      "prefix": "handler",
      "body": [
        "@method (private) handle${1:Event}(${2:event}) {",
        "  ${3:// Handle event}",
        "  this.emit('${4:custom-event}', { ${5:detail} });",
        "}",
        "@end"
      ],
      "description": "Create an event handler method"
    },
    "Lifecycle - onMounted": {
      "prefix": "mounted",
      "body": [
        "@onMounted {",
        "  ${1:// Component mounted}",
        "}",
        "@end"
      ],
      "description": "Component mounted lifecycle"
    },
    "Lifecycle - onUpdated": {
      "prefix": "updated",
      "body": [
        "@onUpdated(${1:name, oldValue, newValue}) {",
        "  ${2:// Attribute changed}",
        "}",
        "@end"
      ],
      "description": "Component updated lifecycle"
    },
    "Style Block": {
      "prefix": "style",
      "body": [
        "@style {",
        "  ${1:/* Component styles */}",
        "}",
        "@end"
      ],
      "description": "Add a style block"
    },
    "Template Block": {
      "prefix": "template",
      "body": [
        "@template {",
        "  ${1:<!-- Template content -->}",
        "}",
        "@end"
      ],
      "description": "Add a template block"
    },
    "Alias": {
      "prefix": "alias",
      "body": [
        "@alias ${1:(${2:type})} ${3:aliasName} = ${4:value}"
      ],
      "description": "Create an alias definition"
    },
    "Directive": {
      "prefix": "directive",
      "body": [
        "@directive ${1:directiveName}(ast) {",
        "  ${2:// Code generation logic}",
        "  return ${3:generatedCode};",
        "}",
        "@end"
      ],
      "description": "Create a custom directive"
    }
  }